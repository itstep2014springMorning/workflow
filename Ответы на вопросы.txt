1. Перечислите типы данных с плавающей запятой в языке Си

самые частые -- float, double, long double
Плюс к этому кучу нестандартных/дополнительных

2. Сколько байт в памяти занимает тип int?
В зависимости от платформы, 2,4 или 8 байт.
Выражение sizeof(int) всегда возвращает истинный размер

3. В каких случаях применяют цикл for ?
Когда тело цикла нужно выполнить _для_ каждого значения некоторой переменной из заданного диапазона

4. В каких случаях применяют цикл do .. while ?
В случае, если тело цикла необходимо выполнить первый раз, не проверяя условие. Например, когда проверка условия не имеет
смысла до выполнения тела:
```C
do {
  // запросить у пользователя правильные данные
} while (данные не правильные)

5. Каков результат выражения 010 - 1<<3

010 - целочисленная _восьмеричная_ константа. В десятичной системе счисления - 8

<< - операция побитового сдвига влево, имеет приоритет выше операции вычитания

010 - 1<<3 => 8 - 1*2^3 => 8 - 8 => 0
Ответ - целое число 0

6. В чём разница между операторами | и || Приведите пример.
|- побитовое или, ||- логическое или
побитовое или применяется отдельно к каждому биту операндов, при этом оба операнда вычисляются всегда
логическое или вычислеяет левый операнд, преобразует его в логический тип, и, если результат - ложь, то обрабатывается второй операнд.
Например:

abs(-1) || abs(-2)
даст "истину", при этом, вторая функция abs не будет вызвана
abs(-1) | abs(-2) в двоичной записи будет представлено как 

  001
|
  010
  ___
  011
  что даст 3, при этом, обе функции abs будут вызваны


7. Каков результат выражения 1/2
поскольку оба операнда _целочисленные_ константы, будет выполненол целочисленное деление, 
результат - 0

8. Какая вычислительная сложность алгоритма сортировки пузырьком?
O(n^2) (эн квадрат)

9. Отранжируйте вычислительные сложности: O(N), O(1), O(N log N), O(N^2), O(log N), O(exp N)
O(1) < O(log N) < O(N) < O(N log N) < O(N^2) < O(exp N)
где < означает меньшее время (порядок времени) выполнения

9.5. Приведите пример алгоритма вычислительной сложности O(1):
- размещение массива в памяти/ освобождение памяти
- индексация элемента массива (выбор элемента по его номеру - индексу)

10. Для чего нужны массивы?
Для работы с нумерованными последовательностями однородных элементов

например - массив с фамилиями сотрудников некоторой организации:
const char *opers[] = {"Жиглов","Шарапов"};


Хотя можно было и так:
const char *oper0 = "Жиглов";
const char *oper1 = "Шарапов";
Но тогда не удалось бы написать универсальный алгоритм, работающий с произвольным количеством сотрудников

11. Что хранится в статической памяти?
- неименованные константы (в основном не скалярные - элементы массивов, строки)
- все глобальные переменные
- элементы массивов, объявленных статически (с фиксированным  размером)
- переменные, объявленные с ключевым словом static
- адреса функций

12. Почему использование глобальных переменных может приводить к ошибкам?
Поскольку они доступны во всём модуле программы (файле .cpp) т.е. в разных функциях, то, 
при большом размере кода и неудачных названиях, они могут внести путаницу.
В целом следует избегать использование глобальных переменных. При этом, иногда, при умеренном, ограниченном использовании, могут упростить написание кода. При этом, таким переменным следует давать длинные и очевидные имена.
